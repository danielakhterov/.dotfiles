" A must
syntax on
filetype plugin indent on

" Fix syntax highlighting
" syntax sync fromstart

" Auto read and update files if edited by another program
set autoread

" Set path to recursively search when using the :find command
set path+=**

" Show horizontal list of values from the :find command
set wildmenu

" Netrw settings
let g:netrw_liststyle=3
" let g:netrw_banner=0
" let g:netrw_winsize=15
let g:netrw_fastbrowse=2

" Disable auto comment insertion
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o


" Show as much of the last line as you can
set display+=lastline

" Change timeout in normal mode
" set timeoutlen=250

" Do not change window sizez upon opening/closing splits
set noequalalways

" Setting dictionary
set dict+=/usr/share/dict/cracklib-small

" Statusline
set laststatus=2
set statusline=%f
set statusline+=[%c:%l/%L]
" set statusline+=%=%{FugitiveStatusline()}\ [%c:%l/%L]

" Color Scheme
colorscheme bee

" Highlight columns past 80
" execute "set colorcolumn=" . join(range(80, 400), ',')

" Set cursor to be in middle of screen and highlight
" set so=999
" set cursorline

" Used to make rendering faster when multiple windows are open
set ttyfast

" Vim-Latex-Live-Preview Variable
" let g:livepreview_previewer = 'mupdf'

" Setting Tim Pope's commentary variable
autocmd FileType c setlocal commentstring=//\ %s
autocmd FileType vim setlocal commentstring=\"\ %s
autocmd FileType sql setlocal commentstring=--\ %s
autocmd FileType py setlocal commentstring=#\ %s
autocmd FileType swift setlocal commentstring=//\ %s

" Basic better of life settings
set number
" set relativenumber 
set tabstop=4
set shiftwidth=4
set expandtab
" set autoindent
" set smartindent
set smartcase

" Folding options
set foldenable
set foldmethod=syntax

" Incremental Search
set incsearch

" Basic mouse settings

" Mouse will select only what visual mode coud select in current window
set mouse=a
set mousefocus

" Mappings
" Leader Mapping
let mapleader="\<Space>"

" Dont want to press shift all the time because keyboard is hard to type on
" nnoremap ; :

" Open buffer list
" nnoremap <silent> <leader>ls :ls<CR>

" Viewing and editting vimrc mappings
nnoremap <silent> <leader>ve :vs $MYVIMRC<CR>
nnoremap <silent> <leader>vs :source $MYVIMRC<CR>

" Open file explorer
nnoremap <silent> <leader>t :Ex<CR>

nnoremap <M-n> <C-w><S-n>

" Necessary for backspace to workin insert mode on all characters
set backspace=indent,eol,start

" Open terminal
nnoremap <silent> <leader>s :sh<CR>

" Mapping for ctags
nnoremap <leader>l <C-]>
nnoremap <leader>h <C-O>

" Change fold bindings
" nnoremap <leader>fo zo
" nnoremap <leader>fc zc
" nnoremap <leader>fa za
" nnoremap R zR
" nnoremap M zM

" autocmd VimLeave * :mks!

" To view hidden characters
" set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
" set list

" UTF-8 Support
" set encoding=UTF-8
" set fileencoding=UTF-8

" Tab commands
nnoremap <silent> th  :tabfirst<CR>
nnoremap <silent> tk  :tabnext<CR>
nnoremap <silent> tj  :tabprev<CR>
nnoremap <silent> tl  :tablast<CR>
nnoremap <silent> tt  :tabfind<Space>
nnoremap <silent> tn  :tabnext<Space>
nnoremap <silent> tm  :tabm<Space>
nnoremap <silent> td  :tabclose<CR>

nnoremap <silent> <Tab>  :tabnext<CR>
nnoremap <silent> <S-Tab>  :tabprev<CR>

" Changes primary key to use to change terminal from running mode
" to terminal mode
" set termwinkey=<C-w>

" No more command windows!
nnoremap q: :q


" Tab status line
set tabline=%!MyTabLine()
set showtabline=2

function MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    " let s .= '%' . (i + 1) . 'T'
    let s .= ' '.(i + 1).':'

    " the label is made by MyTabLabel()
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  " if tabpagenr('$') > 1
  "   let s .= '%=%#TabLine#%999Xclose'
  " endif

  return s
endfunction

function MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  let buf = bufname(buflist[winnr - 1])
  " return bufname(buflist[winnr - 1])
  return strpart(buf, strridx(buf, '/') + 1)
endfunction
