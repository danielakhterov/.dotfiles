" Plugins to install using vim-plug
silent! call plug#begin('~/.vim/plugged')

" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'LnL7/vim-nix'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'agude/vim-eldar'
" Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
Plug 'dart-lang/dart-vim-plugin'
Plug 'easymotion/vim-easymotion'
Plug 'fatih/vim-go'
Plug 'flazz/vim-colorschemes'
Plug 'garbas/vim-snipmate'
Plug 'godlygeek/tabular'
Plug 'https://gitlab.com/protesilaos/tempus-themes-vim.git'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'leafgarland/typescript-vim'
Plug 'natebosch/vim-lsc'
Plug 'natebosch/vim-lsc-dart'
Plug 'plasticboy/vim-markdown'
Plug 'posva/vim-vue'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdtree'
Plug 'terryma/vim-multiple-cursors'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
" Plug 'udalov/kotlin-vim'
Plug 'vim-scripts/tlib'
" Plug 'vmchale/ion-vim'
" Plug 'ycm-core/YouCompleteMe'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'lotabout/skim'

call plug#end()

" A must
syntax on
syntax sync fromstart
filetype off
filetype plugin on

set encoding=utf-8
setglobal fileencoding=utf-8

set autoread
set wildmenu
set noequalalways
set noshowmode
set ttyfast
set path+=**
set display+=lastline
set backspace=indent,eol,start
set cursorline
set nohls

set ignorecase
set smartcase
set incsearch

set mousefocus
set mouse=a

set number
set expandtab
set autoindent
set tabstop=4
set shiftwidth=4

set guioptions=
set guicursor=a:block-Cursor
set guifont=Hack:h14
autocmd! GUIEnter * set vb t_vb=

colorscheme 256-jungle
colorscheme bee

set laststatus=2

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

let mapleader="\<Space>"

vnoremap < <gv
vnoremap > >gv

" nnoremap q: :q

nnoremap <leader>w <C-w>

nnoremap <silent> <Tab>  :tabnext<CR>
nnoremap <silent> <S-Tab>  :tabprev<CR>

nnoremap <silent> <Tab>  :tabnext<CR>
nnoremap <silent> <S-Tab>  :tabprev<CR>

nnoremap <silent> <leader>ve :vs $MYVIMRC<CR>
nnoremap <silent> <leader>vs :source $MYVIMRC<CR>

" -------- "
" NERDTree "
" -------- "

nnoremap <silent> <leader>pt :NERDTreeToggle<CR>

" ---- "
" Rust "
" ---- "

let g:autofmt_autosave = 1
let g:rustfmt_autosave = 1

" ---------- "
" Commentary "
" ---------- "

autocmd FileType c setlocal commentstring=//\ %s
autocmd FileType vim setlocal commentstring=\"\ %s
autocmd FileType sql setlocal commentstring=--\ %s
autocmd FileType py setlocal commentstring=#\ %s
autocmd FileType swift setlocal commentstring=//\ %s
autocmd FileType vue setlocal commentstring=/*\ %s\ */
autocmd FileType cfg setlocal commentstring=#\ %s
autocmd FileType dosini setlocal commentstring=;\ %s

" --- "
" FZF "
" --- "

set rtp+=~/.fzf
nnoremap <leader>pf :Buffers<CR>

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'

" ---------- "
" Easy Align "
" ---------- "

xmap ga <Plug>(EasyAlign)

autocmd BufRead,BufNewFile *.conf :silent! set filetype=dosini
autocmd BufWritePost *.rs :silent! exec "!rusty-tags vi --quiet --start-dir=" . expand("%:p:h") . "&" | redraw!

" let g:LanguageClient_serverCommands = {
"     \ "rust": ["~/.cargo/bin/rust-analyzer"],
"     \ "javascript": ["~/.yarn/bin/typescript-language-server", "--stdio"],
"     \ "typescript": ["~/.yarn/bin/typescript-language-server", "--stdio"],
"     \ "python": ["pyls"]
"     \ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <C-LeftMouse> :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" -------- "
" Deoplete "
" -------- "

let g:deoplete#enable_at_startup = 1

" -------- "
" Markdown "
" -------- "

let g:vim_markdown_folding_disabled = 1

" ---------- "
" EasyMotion "
" ---------- "

map <leader> <Plug>(easymotion-prefix)
let g:EasyMotion_use_smartsign_us = 1 " US layout

" -------- "
" Dart LSP "
" -------- "

let g:lsc_auto_map = v:true
autocmd BufRead,BufNewFile *.dart :silent nnoremap <silent> gd :LSClientGoToDefinition<CR>

function! s:DartSnapshotMacro()
  normal $j$Bviwykopviw:s#\(\u|0€kb€kb\)#\€kb_\l\u€kb1#gxviw"ayddk$%kwmm:read !pug €kb€kbb run ge€kb€kbtest test/a_test.dartkddddka'''));`mciwexpectjddk$hDa.toString(), euq€kb€kbquals('''Jx:w
endfunction

nnoremap <C-G>d :call <sid>DartSnapshotMacro()<CR>





























" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
