" Plugins to install using vim-plug
silent! call plug#begin('~/.vim/plugged')

Plug 'LnL7/vim-nix'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'agude/vim-eldar'
Plug 'cstrahan/vim-capnp'
Plug 'dart-lang/dart-vim-plugin'
Plug 'easymotion/vim-easymotion'
Plug 'flazz/vim-colorschemes'
Plug 'garbas/vim-snipmate'
Plug 'godlygeek/tabular'
Plug 'https://gitlab.com/protesilaos/tempus-themes-vim.git'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'leafgarland/typescript-vim'
Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': ':UpdateRemotePlugins'}
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'plasticboy/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/tlib'

call plug#end()

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

syntax on
syntax sync fromstart

filetype off
filetype plugin on

colorscheme gruvbox

setglobal fileencoding=utf-8

set autoindent
set autoread
set backspace=indent,eol,start
set cmdheight=2
set cursorline
set display+=lastline
set encoding=utf-8
set expandtab
set hidden
set ignorecase
set incsearch
set laststatus=2
set mouse=a
set mousefocus
set nobackup
set noequalalways
set nohls
set noshowmode
set nowritebackup
set number
set path+=**
set rtp+=~/.fzf
set shiftwidth=4
set shortmess+=c
set signcolumn=yes
set smartcase
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
set tabstop=4
set ttyfast
set updatetime=300
set wildmenu

let mapleader="\<Space>"

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
let g:EasyMotion_use_smartsign_us = 1
let g:autofmt_autosave = 1
let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:python3_host_prog = '/usr/bin/python3'
let g:rustfmt_autosave = 1
let g:vim_markdown_folding_disabled = 1

inoremap <silent><expr> <c-space> coc#refresh()
map <leader> <Plug>(easymotion-prefix)
nmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf  <Plug>(coc-fix-current)
nmap <leader>rn <Plug>(coc-rename)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-definition)
nnoremap <leader>pf :Buffers<CR>
nnoremap <leader>w <C-w>
nnoremap <silent> <leader>pt <cmd>CHADopen<cr>
nnoremap <silent> K :call <SID>show_documentation()<CR>
vnoremap < <gv
vnoremap > >gv
xmap <leader>a  <Plug>(coc-codeaction-selected)
xmap ga <Plug>(EasyAlign)

autocmd BufRead,BufNewFile *.conf :silent! set filetype=dosini
autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
autocmd FileType c setlocal commentstring=//\ %s
autocmd FileType cfg setlocal commentstring=#\ %s
autocmd FileType dosini setlocal commentstring=;\ %s
autocmd FileType py setlocal commentstring=#\ %s
autocmd FileType sql setlocal commentstring=--\ %s
autocmd FileType swift setlocal commentstring=//\ %s
autocmd FileType vim setlocal commentstring=\"\ %s
autocmd FileType vue setlocal commentstring=/*\ %s\ */
