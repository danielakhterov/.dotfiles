" Plugins to install using vim-plug
silent! call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'dart-lang/dart-vim-plugin'
Plug 'junegunn/fzf.vim'
Plug 'udalov/kotlin-vim'
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'rust-lang/rust.vim'
Plug 'godlygeek/tabular'
Plug 'vim-scripts/tlib'
Plug 'tomtom/tlib_vim'
Plug 'leafgarland/typescript-vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'fatih/vim-go'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-repeat'
Plug 'garbas/vim-snipmate'
Plug 'tpope/vim-surround'
Plug 'posva/vim-vue'
Plug 'junegunn/vim-easy-align'
Plug 'dag/vim-fish'
Plug 'LnL7/vim-nix'
Plug 'agude/vim-eldar'
Plug 'https://gitlab.com/protesilaos/tempus-themes-vim.git'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'plasticboy/vim-markdown'

call plug#end()

" A must
syntax on
syntax sync fromstart
filetype off
filetype plugin on

set encoding=utf-8
setglobal fileencoding=utf-8

set autoread
set wildmenu
set noequalalways
set noshowmode
set ttyfast
set path+=**
set display+=lastline
set backspace=indent,eol,start
set cursorline
set nohls

set ignorecase
set smartcase
set incsearch

set mousefocus
set mouse=a

set number
set expandtab
set autoindent
set tabstop=4
set shiftwidth=4

set guioptions=
set guicursor=a:block-Cursor
set guifont=Hack:h14
autocmd! GUIEnter * set vb t_vb=

colorscheme 256-jungle
colorscheme bee

set laststatus=2

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

let mapleader="\<Space>"

vnoremap < <gv
vnoremap > >gv

nnoremap q: :q

nnoremap <leader>w <C-w>

nnoremap <silent> <Tab>  :tabnext<CR>
nnoremap <silent> <S-Tab>  :tabprev<CR>

nnoremap <silent> <Tab>  :tabnext<CR>
nnoremap <silent> <S-Tab>  :tabprev<CR>

nnoremap <silent> <leader>ve :vs $MYVIMRC<CR>
nnoremap <silent> <leader>vs :source $MYVIMRC<CR>

nnoremap <silent> <leader>s :sh<CR>

" -------- "
" NERDTree "
" -------- "

nnoremap <silent> <leader>pt :NERDTreeToggle<CR>

" ---- "
" Rust "
" ---- "

let g:autofmt_autosave = 1
let g:rustfmt_autosave = 1

" ---------- "
" Commentary "
" ---------- "

autocmd FileType c setlocal commentstring=//\ %s
autocmd FileType vim setlocal commentstring=\"\ %s
autocmd FileType sql setlocal commentstring=--\ %s
autocmd FileType py setlocal commentstring=#\ %s
autocmd FileType swift setlocal commentstring=//\ %s
autocmd FileType vue setlocal commentstring=/*\ %s\ */
autocmd FileType cfg setlocal commentstring=#\ %s
autocmd FileType dosini setlocal commentstring=;\ %s

" --- "
" FZF "
" --- "

set rtp+=~/.fzf
nnoremap <leader>pf :Buffers<CR>

" ---------- "
" Easy Align "
" ---------- "

xmap ga <Plug>(EasyAlign)

autocmd BufRead,BufNewFile *.conf :silent! set filetype=dosini
autocmd BufWritePost *.rs :silent! exec "!rusty-tags vi --quiet --start-dir=" . expand("%:p:h") . "&" | redraw!

let g:LanguageClient_serverCommands = {
    \ "rust": ["~/.cargo/bin/rust-analyzer"],
    \ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" -------- "
" Deoplete "
" -------- "

let g:deoplete#enable_at_startup = 1

" -------- "
" Markdown "
" -------- "

let g:vim_markdown_folding_disabled = 1
